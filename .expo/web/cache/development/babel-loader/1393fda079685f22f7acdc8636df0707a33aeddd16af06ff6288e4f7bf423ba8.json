{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { collection, getDocs, addDoc, where, query } from 'firebase/firestore/lite';\nimport { db } from \"./firebase.js\";\nexport function getUsers() {\n  return _getUsers.apply(this, arguments);\n}\nfunction _getUsers() {\n  _getUsers = _asyncToGenerator(function* () {\n    var usersCol = collection(db, 'users');\n    var usersSnapshot = yield getDocs(usersCol);\n    var usersList = usersSnapshot.docs.map(function (doc) {\n      return _objectSpread(_objectSpread({}, doc.data()), {}, {\n        id: doc.id\n      });\n    });\n    return usersList;\n  });\n  return _getUsers.apply(this, arguments);\n}\nexport function addUser(_x) {\n  return _addUser.apply(this, arguments);\n}\nfunction _addUser() {\n  _addUser = _asyncToGenerator(function* (user) {\n    try {\n      var usersCol = collection(db, 'users');\n      yield addDoc(usersCol, user);\n      console.log('Usuário cadastrado com sucesso!');\n    } catch (error) {\n      console.error('Erro ao cadastrar usuário:', error);\n    }\n  });\n  return _addUser.apply(this, arguments);\n}\nexport function verifyUserExists(_x2) {\n  return _verifyUserExists.apply(this, arguments);\n}\nfunction _verifyUserExists() {\n  _verifyUserExists = _asyncToGenerator(function* (uId) {\n    var q = query(collection(db, \"users\"), where(\"uId\", \"==\", uId));\n    try {\n      var docSnapshot = yield getDocs(q);\n      if (!docSnapshot.empty) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      console.log('Erro ao verificar usuário no Firestore:', error);\n    }\n  });\n  return _verifyUserExists.apply(this, arguments);\n}\nexport function verifyEmailExists(_x3) {\n  return _verifyEmailExists.apply(this, arguments);\n}\nfunction _verifyEmailExists() {\n  _verifyEmailExists = _asyncToGenerator(function* (email) {\n    var q = query(collection(db, \"users\"), where(\"email\", \"==\", email));\n    try {\n      var docSnapshot = yield getDocs(q);\n      if (!docSnapshot.empty) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      console.log('Erro ao verificar usuário no Firestore:', error);\n    }\n  });\n  return _verifyEmailExists.apply(this, arguments);\n}","map":{"version":3,"names":["collection","getDocs","addDoc","where","query","db","getUsers","_getUsers","apply","arguments","_asyncToGenerator","usersCol","usersSnapshot","usersList","docs","map","doc","_objectSpread","data","id","addUser","_x","_addUser","user","console","log","error","verifyUserExists","_x2","_verifyUserExists","uId","q","docSnapshot","empty","verifyEmailExists","_x3","_verifyEmailExists","email"],"sources":["C:/Users/Sahui/Desktop/projeto 2/pet.ly/services/users.js"],"sourcesContent":["import { collection, getDocs, addDoc, where, query } from 'firebase/firestore/lite';\r\nimport { db } from \"./firebase.js\"\r\n\r\nexport async function getUsers() {\r\n    const usersCol = collection(db, 'users');\r\n    const usersSnapshot = await getDocs(usersCol);\r\n    const usersList = usersSnapshot.docs.map(doc => ({ ... doc.data(), id: doc.id}));\r\n    return usersList;\r\n}\r\n\r\nexport async function addUser(user) {\r\n    try {\r\n      const usersCol = collection(db, 'users');\r\n      await addDoc(usersCol, user);\r\n      console.log('Usuário cadastrado com sucesso!');\r\n    } catch (error) {\r\n      console.error('Erro ao cadastrar usuário:', error);\r\n    }\r\n}\r\n\r\nexport async function verifyUserExists(uId) {\r\n\r\n    //Prepara a consulta\r\n    const q = query(collection(db, \"users\"), where(\"uId\", \"==\", uId));\r\n    \r\n    try {\r\n        //Captura a consulta\r\n        const docSnapshot = await getDocs(q);\r\n\r\n        //Map nos resultados\r\n        //const userData = docSnapshot.docs.map(doc => ({ ... doc.data(), id: doc.id}));\r\n\r\n        //Se o retorno não for vazio retorna verdadeiro, se for vazio retorna false\r\n        if(!docSnapshot.empty) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    } catch (error) {\r\n      console.log('Erro ao verificar usuário no Firestore:', error);\r\n    }\r\n}\r\n\r\nexport async function verifyEmailExists(email) {\r\n\r\n  //Prepara a consulta\r\n  const q = query(collection(db, \"users\"), where(\"email\", \"==\", email));\r\n  \r\n  try {\r\n      //Captura a consulta\r\n      const docSnapshot = await getDocs(q);\r\n\r\n      //Map nos resultados\r\n      //const userData = docSnapshot.docs.map(doc => ({ ... doc.data(), id: doc.id}));\r\n\r\n      //Se o retorno não for vazio retorna verdadeiro, se for vazio retorna false\r\n      if(!docSnapshot.empty) {\r\n          return true;\r\n      } else {\r\n          return false;\r\n      }\r\n\r\n  } catch (error) {\r\n    console.log('Erro ao verificar usuário no Firestore:', error);\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}